{% extends 'app/views/base.html.twig' %}

{% block title %}Objective Reality Solution{% endblock %}
{% block content %}
    <!--
    <div id='myCarousel' class='carousel slide'>
    
        <ol class='carousel-indicators'>
            <li data-target='#myCarousel' data-slide-to='0' class='active'></li>
            <li data-target='#myCarousel' data-slide-to='1'></li>
            <li data-target='#myCarousel' data-slide-to='2'></li>
        </ol>

        <div class='carousel-inner'>
            <div class='item active'>
                <div class='fill' style='background-image:url('http://placehold.it/1900x1080&text=Slide One');'></div>
                <div class='carousel-caption'>
                    <h1>Modern Business - A Bootstrap 3 Template</h1>
                </div>
            </div>
            <div class='item'>
                <div class='fill' style='background-image:url('http://placehold.it/1900x1080&text=Slide Two');'></div>
                <div class='carousel-caption'>
                    <h1>Ready to Style &amp; Add Content</h1>
                </div>
            </div>
            <div class='item'>
                <div class='fill' style='background-image:url('http://placehold.it/1900x1080&text=Slide Three');'></div>
                <div class='carousel-caption'>
                    <h1>Additional Layout Options at <a href='http://startbootstrap.com'>http://startbootstrap.com</a>
                    </h1>
                </div>
            </div>
        </div>

        <a class='left carousel-control' href='#myCarousel' data-slide='prev'>
            <span class='icon-prev'></span>
        </a>
        <a class='right carousel-control' href='#myCarousel' data-slide='next'>
            <span class='icon-next'></span>
        </a>
    </div>
    -->

    <div class='section'>

        <div class='container'>

            <div class='row'>
                <div class='col-lg-4 col-md-4'>
                    <h3><i class='fa fa-check-circle'></i> Objective Reality Pattern</h3>
                    <p>TTI is the first php framework that immerges you in an incredible story telling, that will stimulate your mind and increase connection with your code and entire team.</p>
                </div>
                <div class='col-lg-4 col-md-4'>
                    <h3><i class='fa fa-pencil'></i> Intuitive Config Notation</h3>
                    <p>TTI comes with a dependency container and injector (Roar) based on an ILN (Intuitive Language Notation) file. Managing your dependencies will never be so intuitive.</p>
                </div>
                <div class='col-lg-4 col-md-4'>
                    <h3><i class='fa fa-folder-open'></i> 3 new web principles</h3>
                    <p>TTI introduces 3 new web principles that bring a revolutionary vision in web development, CABIN (Concrete ABstract INterface), CSS (Code Similar Situations), RSSPOCOM.</p>
                </div>
            </div>
            <!-- /.row -->

        </div>
        <!-- /.container -->

    </div>
    <!-- /.section -->

    <div class='section-colored text-center'>

        <div class='container'>

            <div class='row'>
                <div class='col-lg-12'>
                    <h2><b>Roar!!!</b> You play Roar, a troll cave, lost in the Breeze forest by his stupidity.</h2>
                    <p>
                        <b>Roar</b> has several tools at its disposal, like a torch, a map, an eagle that will guide him to the best routes he can teleport to, via the magical portal, an ancestral passort, and an architect who will help him build each territory it conquers.<br/>
                        The goal is to reach all routes and respond to affirm your territory.<br/>
                        When <b>Roar</b> responds, he may beat the asian spirit of the forest, '<b>Foucking Law</b>'.<br/>
                        <b>Foucking Law</b> has one powerful wild beast, <b>CodeCeption</b>, which will test Roar as many times possible, like a ghost.<br/>
                        Everytime <b>Roar</b> responds successfully to <b>Foucking Law</b>, he wins 5 Chicken points.<br/><br/>

                        These points will help you estimate more precisely the technical debt a project will introduce.                        
                    </p>
                    <hr>
                </div>
            </div>
            <!-- /.row -->

        </div>
        <!-- /.container -->

    </div>
    <!-- /.section-colored -->

    <div class='section'>

        <div class='container'>

            <div class='row'>
                <div class='col-lg-12 text-center'>
                    <h2>The first principle behind TTI is CABIN principle!</h2>
                    <hr>
                </div>
                <div class='col-lg-12'>
                    <p>
                        <b>CABIN</b> principle means Concrete ABstract INterface, it is the foundation of TTI. This principle comes from the base notion of an object in web developement.<br/>
                        We strongly believe that an object is only an interface implemented by an abstracted shape we can concretely use, nothing else, nothing more.<br/>
                        That means, a class that doesn't extends an abstracted class that implements itself an interface can't be considered as an object, you can call it a trait or like you want, but not an object.                      
                    </p>
                    <hr>
                </div>
            </div>
            <!-- /.row -->

        </div>
        <!-- /.container -->

    </div>
    <!-- /.section -->

    <div class='section-colored'>

        <div class='container'>

            <div class='row'>
                <div class='col-lg-6 col-md-6 col-sm-6'>
                    <h2>Second powerfull principle: CSS</h2>
                    <p>
                        <b>CSS</b> principle means, Code Similar Situations. It is the base idea from the design pattern Objective Reality.<br/>
                        Everything you live or code, gets an analogy in other life situations, and, it is easier to explain something by analogy.<br/>
                        CSS encourages you, to analyze your code in order to find analogies in current life.<br/>
                        The best analogies are those ones that connect the largest number of people with something fun we all have already lived once, or a movie, a cartoon, something special that happenned in our company... <b>Just be creative!</b><br/><br/>
                        <b>Objective Reality</b> design pattern is just the CSS principle application, it is just, renaming variables to create a mental universe you will easily be able to share and understand yourself.<br/>
                        These are some benefits using CSS principle.
                    </p>
                    <ul>
                        <li>Better understanding of the application</li>
                        <li>Code reuse is strongly facilitate</li>
                        <li>Better connection between you and your code</li>
                        <li>Better communication with your team</li>
                    </ul>
                </div>
                <div class='col-lg-6 col-md-6 col-sm-6'>
                    <img class='img-responsive' src='assets/img/good_game.png'>
                </div>
            </div>
            <!-- /.row -->

        </div>
        <!-- /.container -->

    </div>
    <!-- /.section-colored -->

    <div class='section'>

        <div class='container'>

            <div class='row'>
                <div class='col-lg-6 col-md-6 col-sm-6'>
                    <img class='img-responsive' src='assets/img/actions_controlled.jpg'>
                </div>
                <div class='col-lg-6 col-md-6 col-sm-6'>
                    <h2>The base principle: RSSPOCOM</h2>
                    <p>
                       RSSPOCOM is a contract defined by interfaces within the InterfaceFactory package developed by Edouard Kombo.<br/>
                       Based from the CABIN principle, it is a collection of generics and specifics interfaces that incorporate specifics and generics actions that can be used actually in every applications and projects.<br/>
                       The principle is that, each of these interfaces must be implemented once and only once in all of your abstracted files.<br/>
                       It helps working more friendly with DRY, SOLID and GRASP principles.<br/><br/>
                       These are the generic actions behind RSSPOCOM principle:<br/>
                    </p>
                    <ul>
                        <li><b>R</b>ead/Write</li>
                        <li><b>S</b>ecurity</li>
                        <li><b>S</b>et/Get</li>
                        <li><b>P</b>ipo (PullIn/PullOut)</li>
                        <li><b>O</b>pen/Close</li>
                        <li><b>C</b>ommunication</li>
                        <li><b>O</b>rigination</li>
                        <li><b>M</b>ovement</li>
                    </ul>
                </div>
            </div>
            <!-- /.row -->

        </div>
        <!-- /.container -->

    </div>
    <!-- /.section -->

    <div class='container'>

        <div class='row well'>
            <div class='col-lg-8 col-md-8'>
                <h4>'We don't have to learn another framework, just having fun with good pratices.<br/>
                    Help us ending the end of framework era!  
                </h4>
                <p>Join, the first and very closed reflection community solely composed of creative developers around the world.</p>
            </div>
            <div class='col-lg-4 col-md-4'>
                <a class='btn btn-lg btn-primary pull-right' href='http://www.breezeframework.com' target='_blank'>Join the community!</a>
            </div>
        </div>
        <!-- /.row -->

    </div>
    <!-- /.container -->
{% endblock %}